on:
  - pull_request
  - push

name: build

jobs:
  tests:
    name: PHP ${{ matrix.php }}-mssql-${{ matrix.mssql }}

    env:
      extensions: curl, intl, pdo
      key: cache

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest

        php:
          - "7.4"

        mssql:
          - "server:2017-latest"

    services:
      mssql:
          image: mcr.microsoft.com/mssql/${{ matrix.mssql }}
          env:
              SA_PASSWORD: YourStrong!Passw0rd
              ACCEPT_EULA: Y
              MSSQL_PID: Developer
          ports:
              - 1433:1433
          options: --name=mssql --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'SELECT 1'" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create MS SQL Database
        run: docker exec -i mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'CREATE DATABASE yiitest'

      - name: Setup cache environment
        id: cache
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v2.1.1
        with:
          path: ${{ steps.cache.outputs.dir }}
          key: ${{ steps.cache.outputs.key }}
          restore-keys: ${{ steps.cache.outputs.key }}

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.extensions }}
          ini-values: date.timezone='UTC'
          coverage: pcov
          tools: composer:v2, pecl

      - name: Install php-sqlsrv
        run: |
            curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - >/dev/null 2>&1
            curl -sSL https://packages.microsoft.com/config/ubuntu/16.04/mssql-server-2017.list | sudo tee /etc/apt/sources.list.d/mssql-server-2017.list >/dev/null 2>&1
            printf "\033[32;1m✓ \033[0m\033[90;1madd microsoft keys & repository\n"
            sudo apt-get -q update >/dev/null 2>&1
            printf "\033[32;1m✓ \033[0m\033[90;1mapt-get update\n"
            sudo pecl -q install pdo_sqlsrv > /dev/null 2>&1
            printf "\033[32;1m✓ \033[0m\033[90;1mpecl install pdo_sqlsrv\n"
            if (php -m | grep -i -q -w "pdo_sqlsrv"); then
                printf "\033[32;1mpdo_sqlsrv installed correct\n"
            else
                printf "\033[31;1mpdo_sqlsrv not installed :-(\n"
            fi

      - name: Determine composer cache directory on Linux
        if: matrix.os == 'ubuntu-latest'
        run: echo "::set-env name=COMPOSER_CACHE_DIR::$(composer config cache-dir)"

      - name: Determine composer cache directory on Windows
        if: matrix.os == 'windows-latest'
        run: ECHO "::set-env name=COMPOSER_CACHE_DIR::~\AppData\Local\Composer"

      - name: Cache dependencies installed with composer
        uses: actions/cache@v2.1.1
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: php${{ matrix.php }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            php${{ matrix.php }}-composer-${{ matrix.dependencies }}-

      - name: Install dependencies with composer php 7.4
        if: matrix.php == '7.4'
        run: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader

      - name: Install dependencies with composer php 8.0
        if: matrix.php == '8.0'
        run: composer update --ignore-platform-reqs --prefer-dist --no-interaction --no-progress --optimize-autoloader

      - name: Run pgsql tests with phpunit
        run: vendor/bin/phpunit --coverage-clover=coverage.clover

      - name: Code coverage
        if: matrix.php == '7.4'
        run: |
          wget https://scrutinizer-ci.com/ocular.phar
          php ocular.phar code-coverage:upload --format=php-clover coverage.clover
